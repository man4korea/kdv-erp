/*
üìÅ js/error-tracker.js  
KDV ERP ÏãúÏä§ÌÖú - Ïã§ÏãúÍ∞Ñ Ïò§Î•ò Ï∂îÏ†Å ÏãúÏä§ÌÖú
Create at 250525_2030 Ver1.00
*/

import { logger } from './logger.js';

/**
 * Ïã§ÏãúÍ∞Ñ Ïò§Î•ò Ï∂îÏ†Å ÏãúÏä§ÌÖú
 * JavaScript Ïò§Î•òÎ•º Ïã§ÏãúÍ∞ÑÏúºÎ°ú Ï∫êÏπòÌïòÍ≥† Î∂ÑÏÑùÌïòÎäî ÏãúÏä§ÌÖú
 */
class ErrorTracker {
    constructor() {
        // Ïò§Î•ò Ï∂îÏ†Å ÏÑ§Ï†ï
        this.config = {
            enableGlobalErrorHandler: true,        // Ï†ÑÏó≠ Ïò§Î•ò Ìï∏Îì§Îü¨ ÌôúÏÑ±Ìôî
            enableUnhandledRejection: true,        // Promise rejection Ï∂îÏ†Å
            enableConsoleOverride: true,           // console Î©îÏÑúÎìú Ïò§Î≤ÑÎùºÏù¥Îìú
            enablePerformanceTracking: true,      // ÏÑ±Îä• ÏßÄÌëú Ï∂îÏ†Å
            enableUserInteractionTracking: true,  // ÏÇ¨Ïö©Ïûê ÏÉÅÌò∏ÏûëÏö© Ï∂îÏ†Å
            enableMemoryTracking: true,           // Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ Ï∂îÏ†Å
            maxErrorsPerSession: 100,             // ÏÑ∏ÏÖòÎãπ ÏµúÎåÄ Ïò§Î•ò Ïàò
            alertThreshold: 5,                    // Ïó∞ÏÜç Ïò§Î•ò ÏïåÎ¶º ÏûÑÍ≥ÑÍ∞í
            sampleRate: 1.0                       // Ïò§Î•ò ÏÉòÌîåÎßÅ ÎπÑÏú® (1.0 = 100%)
        };

        // Ïò§Î•ò ÌÜµÍ≥Ñ
        this.stats = {
            totalErrors: 0,
            sessionErrors: 0,
            consecutiveErrors: 0,
            lastErrorTime: null,
            errorTypes: {},
            performanceIssues: 0
        };

        // Ïò§Î•ò Ï∫êÏãú (Ï§ëÎ≥µ Ï†úÍ±∞Ïö©)
        this.errorCache = new Map();
        this.cacheExpiryTime = 30000; // 30Ï¥à

        // ÏÑ±Îä• ÏûÑÍ≥ÑÍ∞í
        this.performanceThresholds = {
            slowFunction: 100,      // 100ms Ïù¥ÏÉÅ
            memoryUsage: 50,        // 50MB Ïù¥ÏÉÅ  
            renderTime: 16          // 16ms Ïù¥ÏÉÅ (60fps Í∏∞Ï§Ä)
        };

        // Ï¥àÍ∏∞Ìôî
        this.init();
    }

    /**
     * Ïò§Î•ò Ï∂îÏ†Å ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî
     */
    init() {
        // Ï†ÑÏó≠ Ïò§Î•ò Ìï∏Îì§Îü¨ ÏÑ§Ï†ï
        if (this.config.enableGlobalErrorHandler) {
            this.setupGlobalErrorHandler();
        }

        // Promise rejection Ìï∏Îì§Îü¨ ÏÑ§Ï†ï
        if (this.config.enableUnhandledRejection) {
            this.setupUnhandledRejectionHandler();
        }

        // ÏΩòÏÜî Î©îÏÑúÎìú Ïò§Î≤ÑÎùºÏù¥Îìú
        if (this.config.enableConsoleOverride) {
            this.setupConsoleOverride();
        }

        // ÏÑ±Îä• Ï∂îÏ†Å
        if (this.config.enablePerformanceTracking) {
            this.setupPerformanceTracking();
        }

        // ÏÇ¨Ïö©Ïûê ÏÉÅÌò∏ÏûëÏö© Ï∂îÏ†Å
        if (this.config.enableUserInteractionTracking) {
            this.setupUserInteractionTracking();
        }

        // Î©îÎ™®Î¶¨ Ï∂îÏ†Å
        if (this.config.enableMemoryTracking) {
            this.setupMemoryTracking();
        }

        // Ï†ïÍ∏∞Ï†Å Ï†ïÎ¶¨ ÏûëÏóÖ
        this.setupCleanupTasks();

        logger.info('üîç ErrorTracker Ï¥àÍ∏∞Ìôî ÏôÑÎ£å', { config: this.config });
    }

    /**
     * Ï†ÑÏó≠ Ïò§Î•ò Ìï∏Îì§Îü¨ ÏÑ§Ï†ï
     */
    setupGlobalErrorHandler() {
        // JavaScript Ïò§Î•ò Ìï∏Îì§Îü¨
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'javascript_error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                error: event.error,
                stack: event.error?.stack
            });
        });

        // Î¶¨ÏÜåÏä§ Î°úÎî© Ïò§Î•ò Ìï∏Îì§Îü¨
        window.addEventListener('error', (event) => {
            if (event.target !== window) {
                this.handleError({
                    type: 'resource_error',
                    message: `Î¶¨ÏÜåÏä§ Î°úÎî© Ïã§Ìå®: ${event.target.tagName}`,
                    element: event.target.tagName,
                    src: event.target.src || event.target.href,
                    details: {
                        tagName: event.target.tagName,
                        src: event.target.src,
                        href: event.target.href
                    }
                });
            }
        }, true);
    }

    /**
     * Promise rejection Ìï∏Îì§Îü¨ ÏÑ§Ï†ï
     */
    setupUnhandledRejectionHandler() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'unhandled_promise_rejection',
                message: event.reason?.message || 'Ï≤òÎ¶¨ÎêòÏßÄ ÏïäÏùÄ Promise rejection',
                reason: event.reason,
                stack: event.reason?.stack
            });
        });
    }

    /**
     * ÏΩòÏÜî Î©îÏÑúÎìú Ïò§Î≤ÑÎùºÏù¥Îìú
     */
    setupConsoleOverride() {
        const originalConsole = {
            error: console.error,
            warn: console.warn
        };

        // console.error Ïò§Î≤ÑÎùºÏù¥Îìú
        console.error = (...args) => {
            originalConsole.error.apply(console, args);
            this.handleConsoleError('error', args);
        };

        // console.warn Ïò§Î≤ÑÎùºÏù¥Îìú
        console.warn = (...args) => {
            originalConsole.warn.apply(console, args);
            this.handleConsoleError('warn', args);
        };

        // ÏõêÎ≥∏ ÏΩòÏÜî Ï∞∏Ï°∞ Ï†ÄÏû•
        this.originalConsole = originalConsole;
    }

    /**
     * ÏÑ±Îä• Ï∂îÏ†Å ÏÑ§Ï†ï
     */
    setupPerformanceTracking() {
        // Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ Ï∂îÏ†Å
        this.monitorMemoryUsage();
    }

    /**
     * Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ Î™®ÎãàÌÑ∞ÎßÅ
     */
    monitorMemoryUsage() {
        if ('memory' in performance) {
            setInterval(() => {
                const memory = performance.memory;
                const usedMB = memory.usedJSHeapSize / 1048576; // MB Î≥ÄÌôò

                if (usedMB > this.performanceThresholds.memoryUsage) {
                    this.handlePerformanceIssue({
                        type: 'high_memory_usage',
                        usedMB,
                        totalMB: memory.totalJSHeapSize / 1048576,
                        limitMB: memory.jsHeapSizeLimit / 1048576
                    });
                }
            }, 30000); // 30Ï¥àÎßàÎã§ Ï≤¥ÌÅ¨
        }
    }

    /**
     * ÏÇ¨Ïö©Ïûê ÏÉÅÌò∏ÏûëÏö© Ï∂îÏ†Å ÏÑ§Ï†ï
     */
    setupUserInteractionTracking() {
        ['click', 'keydown', 'submit'].forEach(eventType => {
            document.addEventListener(eventType, (event) => {
                this.trackUserInteraction(eventType, event);
            });
        });
    }

    /**
     * Î©îÎ™®Î¶¨ Ï∂îÏ†Å ÏÑ§Ï†ï
     */
    setupMemoryTracking() {
        // Î©îÎ™®Î¶¨ ÎàÑÏàò Í∞êÏßÄÎ•º ÏúÑÌïú Ï£ºÍ∏∞Ï†Å Ï≤¥ÌÅ¨
        setInterval(() => {
            this.checkMemoryLeaks();
        }, 60000); // 1Î∂ÑÎßàÎã§
    }

    /**
     * Ïò§Î•ò Ï≤òÎ¶¨ Î©îÏù∏ Ìï®Ïàò
     */
    handleError(errorData) {
        // ÏÉòÌîåÎßÅ Ï†ÅÏö©
        if (Math.random() > this.config.sampleRate) {
            return;
        }

        // ÏÑ∏ÏÖòÎãπ ÏµúÎåÄ Ïò§Î•ò Ïàò ÌôïÏù∏
        if (this.stats.sessionErrors >= this.config.maxErrorsPerSession) {
            return;
        }

        // Ï§ëÎ≥µ Ïò§Î•ò Ï≤¥ÌÅ¨
        const errorKey = this.generateErrorKey(errorData);
        if (this.isDuplicateError(errorKey)) {
            return;
        }

        // Ïò§Î•ò Îç∞Ïù¥ÌÑ∞ Î≥¥Í∞ï
        const enrichedError = this.enrichErrorData(errorData);

        // Î°úÍ±∞Î°ú Ïò§Î•ò Í∏∞Î°ù
        logger.error('ÏãúÏä§ÌÖú Ïò§Î•ò Í∞êÏßÄ', {
            errorData: enrichedError,
            userAgent: navigator.userAgent,
            url: window.location.href,
            timestamp: new Date().toISOString()
        }, errorData.error);

        // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        this.updateErrorStats(errorData);

        // Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º Ï≤¥ÌÅ¨
        this.checkForAlerts();

        // Ïò§Î•ò Ï∫êÏãúÏóê Ï†ÄÏû•
        this.cacheError(errorKey, enrichedError);
    }

    /**
     * ÏΩòÏÜî Ïò§Î•ò Ï≤òÎ¶¨
     */
    handleConsoleError(level, args) {
        const message = args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg) : String(arg)
        ).join(' ');

        this.handleError({
            type: `console_${level}`,
            message,
            arguments: args,
            stack: new Error().stack
        });
    }

    /**
     * ÏÑ±Îä• Ïù¥Ïäà Ï≤òÎ¶¨
     */
    handlePerformanceIssue(performanceData) {
        this.stats.performanceIssues++;

        logger.warn('ÏÑ±Îä• Ïù¥Ïäà Í∞êÏßÄ', {
            performanceData,
            timestamp: new Date().toISOString()
        });

        // Ïã¨Í∞ÅÌïú ÏÑ±Îä• Ïù¥ÏäàÏù∏ Í≤ΩÏö∞ Ïò§Î•òÎ°ú Ï∑®Í∏â
        if (performanceData.type === 'high_memory_usage' && 
            performanceData.usedMB > this.performanceThresholds.memoryUsage * 2) {
            this.handleError({
                type: 'critical_performance_issue',
                message: 'Ïã¨Í∞ÅÌïú Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ Ï¥àÍ≥º',
                ...performanceData
            });
        }
    }

    /**
     * ÏÇ¨Ïö©Ïûê ÏÉÅÌò∏ÏûëÏö© Ï∂îÏ†Å
     */
    trackUserInteraction(eventType, event) {
        // Ïò§Î•ò Î∞úÏÉù ÏßÅÏ†ÑÏùò ÏÇ¨Ïö©Ïûê ÌñâÎèô Ï∂îÏ†Å (ÎîîÎ≤ÑÍπÖÏö©)
        const interactionData = {
            type: eventType,
            target: event.target.tagName,
            timestamp: Date.now(),
            details: {
                id: event.target.id,
                className: event.target.className,
                path: this.getElementPath(event.target)
            }
        };

        // ÏµúÍ∑º ÏÉÅÌò∏ÏûëÏö©Îßå Ï†ÄÏû• (ÏµúÎåÄ 10Í∞ú)
        if (!this.recentInteractions) {
            this.recentInteractions = [];
        }

        this.recentInteractions.unshift(interactionData);
        if (this.recentInteractions.length > 10) {
            this.recentInteractions.pop();
        }
    }

    /**
     * Ïò§Î•ò Îç∞Ïù¥ÌÑ∞ Î≥¥Í∞ï
     */
    enrichErrorData(errorData) {
        return {
            ...errorData,
            id: this.generateErrorId(),
            timestamp: new Date().toISOString(),
            sessionId: this.getSessionId(),
            userId: this.getUserId(),
            deviceInfo: this.getDeviceInfo(),
            browserInfo: this.getBrowserInfo(),
            recentInteractions: this.recentInteractions?.slice(0, 5) || [],
            performanceMetrics: this.getPerformanceMetrics()
        };
    }

    /**
     * ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
     */
    updateErrorStats(errorData) {
        this.stats.totalErrors++;
        this.stats.sessionErrors++;
        
        const now = Date.now();
        
        // Ïó∞ÏÜç Ïò§Î•ò Ïπ¥Ïö¥Ìä∏
        if (this.stats.lastErrorTime && (now - this.stats.lastErrorTime) < 10000) {
            this.stats.consecutiveErrors++;
        } else {
            this.stats.consecutiveErrors = 1;
        }
        
        this.stats.lastErrorTime = now;

        // Ïò§Î•ò ÌÉÄÏûÖÎ≥Ñ ÌÜµÍ≥Ñ
        const errorType = errorData.type;
        this.stats.errorTypes[errorType] = (this.stats.errorTypes[errorType] || 0) + 1;
    }

    /**
     * Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º Ï≤¥ÌÅ¨
     */
    checkForAlerts() {
        // Ïó∞ÏÜç Ïò§Î•ò ÏûÑÍ≥ÑÍ∞í Ï≤¥ÌÅ¨
        if (this.stats.consecutiveErrors >= this.config.alertThreshold) {
            this.sendAlert({
                type: 'consecutive_errors',
                count: this.stats.consecutiveErrors,
                message: `Ïó∞ÏÜçÏúºÎ°ú ${this.stats.consecutiveErrors}Í∞úÏùò Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.`
            });
        }

        // ÏÑ∏ÏÖò Ïò§Î•ò ÏûÑÍ≥ÑÍ∞í Ï≤¥ÌÅ¨
        const uptime = Date.now() - performance.timing.navigationStart;
        const sessionErrorRate = this.stats.sessionErrors / (uptime / 60000); // Î∂ÑÎãπ Ïò§Î•òÏú®
        if (sessionErrorRate > 1) { // Î∂ÑÎãπ 1Í∞ú Ïù¥ÏÉÅ
            this.sendAlert({
                type: 'high_error_rate',
                rate: sessionErrorRate,
                message: 'ÎÜíÏùÄ Ïò§Î•ò Î∞úÏÉùÎ•†Ïù¥ Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§.'
            });
        }
    }

    /**
     * ÏïåÎ¶º Ï†ÑÏÜ°
     */
    sendAlert(alertData) {
        logger.fatal('ÏãúÏä§ÌÖú ÏïåÎ¶º', { alertData });

        // Î∏åÎùºÏö∞Ï†Ä ÏïåÎ¶º (Í∂åÌïúÏù¥ ÏûàÎäî Í≤ΩÏö∞)
        if (Notification.permission === 'granted') {
            new Notification('KDV ÏãúÏä§ÌÖú ÏïåÎ¶º', {
                body: alertData.message,
                icon: '/favicon.ico'
            });
        }

        // ÏΩòÏÜîÏóê ÎààÏóê ÎùÑÎäî ÏïåÎ¶º
        console.warn(
            '%cüö® KDV ÏãúÏä§ÌÖú ÏïåÎ¶º üö®',
            'background: red; color: white; font-size: 16px; padding: 10px;',
            alertData.message
        );
    }

    /**
     * Ïú†Ìã∏Î¶¨Ìã∞ Î©îÏÑúÎìúÎì§
     */
    generateErrorKey(errorData) {
        return `${errorData.type}_${errorData.message}_${errorData.filename || ''}_${errorData.lineno || ''}`;
    }

    generateErrorId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }

    isDuplicateError(errorKey) {
        const now = Date.now();
        const cached = this.errorCache.get(errorKey);
        
        if (cached && (now - cached.timestamp) < this.cacheExpiryTime) {
            cached.count++;
            return true;
        }
        
        return false;
    }

    cacheError(errorKey, errorData) {
        this.errorCache.set(errorKey, {
            errorData,
            timestamp: Date.now(),
            count: 1
        });
    }

    getSessionId() {
        let sessionId = sessionStorage.getItem('kdv_session_id');
        if (!sessionId) {
            sessionId = this.generateErrorId();
            sessionStorage.setItem('kdv_session_id', sessionId);
        }
        return sessionId;
    }

    getUserId() {
        // Firebase Auth ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ (ÏûàÎäî Í≤ΩÏö∞)
        try {
            const user = window.firebase?.auth?.currentUser;
            return user ? user.uid : 'anonymous';
        } catch (e) {
            return 'anonymous';
        }
    }

    getDeviceInfo() {
        return {
            screen: `${screen.width}x${screen.height}`,
            viewport: `${window.innerWidth}x${window.innerHeight}`,
            pixelRatio: window.devicePixelRatio,
            platform: navigator.platform,
            language: navigator.language,
            cookieEnabled: navigator.cookieEnabled,
            onLine: navigator.onLine
        };
    }

    getBrowserInfo() {
        return {
            userAgent: navigator.userAgent,
            vendor: navigator.vendor,
            appName: navigator.appName,
            appVersion: navigator.appVersion,
            hardwareConcurrency: navigator.hardwareConcurrency
        };
    }

    getElementPath(element) {
        const path = [];
        while (element && element.nodeType === Node.ELEMENT_NODE) {
            let selector = element.nodeName.toLowerCase();
            if (element.id) {
                selector += '#' + element.id;
            } else if (element.className) {
                selector += '.' + element.className.split(' ').join('.');
            }
            path.unshift(selector);
            element = element.parentNode;
        }
        return path.join(' > ');
    }

    getPerformanceMetrics() {
        if ('performance' in window) {
            const navigation = performance.getEntriesByType('navigation')[0];
            const memory = performance.memory;
            
            return {
                loadTime: navigation ? navigation.loadEventEnd - navigation.fetchStart : null,
                domContentLoaded: navigation ? navigation.domContentLoadedEventEnd - navigation.fetchStart : null,
                memoryUsed: memory ? Math.round(memory.usedJSHeapSize / 1048576) : null,
                memoryTotal: memory ? Math.round(memory.totalJSHeapSize / 1048576) : null
            };
        }
        return null;
    }

    checkMemoryLeaks() {
        if ('memory' in performance) {
            const memory = performance.memory;
            const usedMB = memory.usedJSHeapSize / 1048576;
            const totalMB = memory.totalJSHeapSize / 1048576;
            
            // Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•†Ïù¥ 90% Ïù¥ÏÉÅÏù¥Î©¥ Í≤ΩÍ≥†
            if (usedMB / totalMB > 0.9) {
                this.handleError({
                    type: 'memory_leak_warning',
                    message: 'Î©îÎ™®Î¶¨ ÎàÑÏàò ÏùòÏã¨',
                    usedMB,
                    totalMB,
                    usageRate: usedMB / totalMB
                });
            }
        }
    }

    /**
     * Ï†ïÎ¶¨ ÏûëÏóÖ ÏÑ§Ï†ï
     */
    setupCleanupTasks() {
        // 5Î∂ÑÎßàÎã§ Ïò§Î•ò Ï∫êÏãú Ï†ïÎ¶¨
        setInterval(() => {
            this.cleanupErrorCache();
        }, 5 * 60 * 1000);

        // 10Î∂ÑÎßàÎã§ ÌÜµÍ≥Ñ Î¶¨ÏÖã (Ïó∞ÏÜç Ïò§Î•ò Ïπ¥Ïö¥Ìä∏)
        setInterval(() => {
            this.stats.consecutiveErrors = 0;
        }, 10 * 60 * 1000);
    }

    cleanupErrorCache() {
        const now = Date.now();
        for (const [key, value] of this.errorCache.entries()) {
            if (now - value.timestamp > this.cacheExpiryTime) {
                this.errorCache.delete(key);
            }
        }
    }

    /**
     * Í≥µÍ∞ú API Î©îÏÑúÎìúÎì§
     */
    
    // ÏàòÎèôÏúºÎ°ú Ïò§Î•ò Î≥¥Í≥†
    reportError(message, metadata = {}) {
        this.handleError({
            type: 'manual_report',
            message,
            metadata,
            stack: new Error().stack
        });
    }

    // Ìï®Ïàò Ïã§ÌñâÏùÑ ÎûòÌïëÌïòÏó¨ Ïò§Î•ò Ï∂îÏ†Å
    wrapFunction(fn, functionName = 'anonymous') {
        return (...args) => {
            try {
                const startTime = performance.now();
                const result = fn.apply(this, args);
                const endTime = performance.now();
                
                // Ïã§Ìñâ ÏãúÍ∞ÑÏù¥ ÎÑàÎ¨¥ Í∏¥ Í≤ΩÏö∞ ÏÑ±Îä• Ïù¥ÏäàÎ°ú Î≥¥Í≥†
                if (endTime - startTime > this.performanceThresholds.slowFunction) {
                    this.handlePerformanceIssue({
                        type: 'slow_function',
                        functionName,
                        duration: endTime - startTime
                    });
                }
                
                return result;
            } catch (error) {
                this.handleError({
                    type: 'wrapped_function_error',
                    message: `Ìï®Ïàò ${functionName}ÏóêÏÑú Ïò§Î•ò Î∞úÏÉù: ${error.message}`,
                    functionName,
                    error,
                    stack: error.stack
                });
                throw error; // ÏõêÎûò Ïò§Î•òÎ•º Îã§Ïãú ÎçòÏßê
            }
        };
    }

    // Promise ÎûòÌïëÌïòÏó¨ Ïò§Î•ò Ï∂îÏ†Å
    wrapPromise(promise, promiseName = 'anonymous') {
        return promise.catch(error => {
            this.handleError({
                type: 'wrapped_promise_error',
                message: `Promise ${promiseName}ÏóêÏÑú Ïò§Î•ò Î∞úÏÉù: ${error.message}`,
                promiseName,
                error,
                stack: error.stack
            });
            throw error; // ÏõêÎûò Ïò§Î•òÎ•º Îã§Ïãú ÎçòÏßê
        });
    }

    // Ïò§Î•ò ÌÜµÍ≥Ñ Ï°∞Ìöå
    getErrorStats() {
        return {
            ...this.stats,
            cacheSize: this.errorCache.size,
            uptime: Date.now() - performance.timing.navigationStart
        };
    }

    // ÏµúÍ∑º Ïò§Î•ò Ï°∞Ìöå
    getRecentErrors(count = 10) {
        return logger.filterLogs({
            level: logger.LogLevel.ERROR
        }).slice(0, count);
    }

    // ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
        logger.info('üîç ErrorTracker ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏', { config: this.config });
    }

    // ÏãúÏä§ÌÖú Ï¢ÖÎ£å
    destroy() {
        // ÏõêÎ≥∏ ÏΩòÏÜî Î≥µÏõê
        if (this.originalConsole) {
            console.error = this.originalConsole.error;
            console.warn = this.originalConsole.warn;
        }
        
        logger.info('üîç ErrorTracker ÏãúÏä§ÌÖú Ï¢ÖÎ£å');
    }
}

// Ï†ÑÏó≠ ErrorTracker Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
const errorTracker = new ErrorTracker();

// Ï†ÑÏó≠ export
window.ErrorTracker = ErrorTracker;
window.errorTracker = errorTracker;

// Ìé∏Ïùò Ìï®ÏàòÎì§ÏùÑ Ï†ÑÏó≠Ïóê Îì±Î°ù
window.reportError = (message, metadata) => errorTracker.reportError(message, metadata);
window.wrapFunction = (fn, name) => errorTracker.wrapFunction(fn, name);
window.wrapPromise = (promise, name) => errorTracker.wrapPromise(promise, name);

export { ErrorTracker, errorTracker };

console.log('üîç ErrorTracker Î™®Îìà Î°úÎìú ÏôÑÎ£å');
